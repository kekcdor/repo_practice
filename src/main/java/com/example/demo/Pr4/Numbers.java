package com.example.demo.Pr4;

import java.util.HashMap;
import java.util.Map;

public class Numbers {

    public static final Map<String, Integer> baseNumbers = new HashMap<>();
    public static final Map<String, Long> bigNumbers = new HashMap<>();

    static {
        fillBaseNumbers();
        fillBigNumbers();
    }

    private static void fillBaseNumbers() {
        put(baseNumbers,
                "один", 1, "одного", 1, "одному", 1, "одним", 1, "одном", 1,
                "два", 2, "двух", 2, "двум", 2, "двумя", 2,
                "три", 3, "трех", 3, "трем", 3, "тремя", 3,
                "четыре", 4, "четырех", 4, "четырем", 4, "четырьмя", 4,
                "пять", 5, "пяти", 5, "пятью", 5,
                "шесть", 6, "шести", 6, "шестью", 6,
                "семь", 7, "семи", 7, "семью", 7,
                "восемь", 8, "восьми", 8, "восемью", 8,
                "девять", 9, "девяти", 9, "девятью", 9,
                "десять", 10, "десяти", 10, "десятью", 10,
                "одиннадцать", 11, "одиннадцати", 11, "одиннадцатью", 11,
                "двенадцать", 12, "двенадцати", 12, "двенадцатью", 12,
                "тринадцать", 13, "тринадцати", 13, "тринадцатью", 13,
                "четырнадцать", 14, "четырнадцати", 14, "четырнадцатью", 14,
                "пятнадцать", 15, "пятнадцати", 15, "пятнадцатью", 15,
                "шестнадцать", 16, "шестнадцати", 16, "шестнадцатью", 16,
                "семнадцать", 17, "семнадцати", 17, "семнадцатью", 17,
                "восемнадцать", 18, "восемнадцати", 18, "восемнадцатью", 18,
                "девятнадцать", 19, "девятнадцати", 19, "девятнадцатью", 19,
                "двадцать", 20, "двадцати", 20, "двадцатью", 20,
                "тридцать", 30, "тридцати", 30, "тридцатью", 30,
                "сорок", 40, "сорока", 40,
                "пятьдесят", 50, "пятидесяти", 50, "пятьюдесятью", 50,
                "шестьдесят", 60, "шестидесяти", 60, "шестьюдесятью", 60,
                "семьдесят", 70, "семидесяти", 70, "семьюдесятью", 70,
                "восемьдесят", 80, "восьмидесяти", 80, "восемьюдесятью", 80,
                "девяносто", 90, "девяноста", 90,
                "сто", 100, "ста", 100,
                "двести", 200, "двухсот", 200, "двумстам", 200, "двумястами", 200, "двухстах", 200,
                "триста", 300, "трехсот", 300, "тремстам", 300, "тремястами", 300, "трехстах", 300,
                "четыреста", 400, "четырехсот", 400, "четыремстам", 400, "четырьмястами", 400, "четырехстах", 400,
                "пятьсот", 500, "пятисот", 500, "пятистам", 500, "пятьюстами", 500, "пятистах", 500,
                "шестьсот", 600, "шестисот", 600, "шестистам", 600, "шестьюстами", 600, "шестистах", 600,
                "семьсот", 700, "семисот", 700, "семистам", 700, "семьюстами", 700, "семистах", 700,
                "восемьсот", 800, "восьмисот", 800, "восьмистам", 800, "восемьюстами", 800, "восьмистах", 800,
                "девятьсот", 900, "девятисто", 900, "девятистам", 900, "девятьюстами", 900, "девятистах", 900);
    }

    private static void fillBigNumbers() {
        put(bigNumbers,
                "тысяч", 1000L, "тысяча", 1000L, "тысячи", 1000L, "тысяче", 1000L, "тысячу", 1000L, "тысячей", 1000L, "тысячам", 1000L, "тысячами", 1000L, "тысячах", 1000L,
                "миллион", 1000000L, "миллиона", 1000000L, "миллионов", 1000000L, "миллиону", 1000000L, "миллионом", 1000000L, "миллионе", 1000000L, "миллионах", 1000000L, "миллионам", 1000000L, "миллионами", 1000000L,
                "миллиард", 1000000000L, "миллиарда", 1000000000L, "миллиардов", 1000000000L, "миллиарду", 1000000000L, "миллиардом", 1000000000L, "миллиарде", 1000000000L, "миллиардах", 1000000000L, "миллиардам", 1000000000L, "миллиардами", 1000000000L);
    }

    private static <T> void put(Map<String, T> map, Object... keyValuePairs) {
        if (keyValuePairs.length % 2 != 0) {
            throw new IllegalArgumentException("Количество аргументов должно быть чётным");
        }
        for (int i = 0; i < keyValuePairs.length; i += 2) {
            map.put((String) keyValuePairs[i], (T) keyValuePairs[i + 1]);
        }
    }
}
